Motivation
-----------

When developing new algorithms or new extensions for the boost::gil library it would be nice to have graphical
output immediately, usually on a window. The scope of the sdl extension is to provide exactely this. It offers
you an easy to way to create a window on the screen and react to common events, like from the keyboard for
instance. It's even possible to add a timer to a window!

The underlying window's framework is SDL (http://libsdl.org/). It's a very popular cross-platform multimedia
library. Unfortunately the current version (1.2) doesn't provide the ability for having multiple windows on
the screen.


Tutorial
--------

The sdl extension uses a simple producer-consumer scheme to acommondate the sdl framework. The producer is
the sdl_service which is a singleton which receives all events from sdl. When calling the sdl_service::run()
operation it will take over the current thread and only return when the appilication is done.
The consumer is a sdl_window which runs on seperate thread. This class offers an easy to add custom event
handler through template parameter. It's very similar to the policy-based idiom
The producer and consumer are communicating through a simple message loop.

The simplest possible application which does nothing but showing an black window looks, as follows:

//code begin

#include <boost/shared_ptr.hpp>

#include <boost/gil/gil_all.hpp>

#include <boost/gil/extension/io/bmp_io.hpp>
#include <boost/gil/extension/sdl/sdl_wrapper.hpp>

using namespace std;
using namespace boost;
using namespace gil;
using namespace sdl;

int main( int argc, char* argv[] )
{
   typedef sdl_window<> window_t;
   typedef shared_ptr< window_t > window_ptr_t;

   window_ptr_t win( new window_t( 640
                                 , 480 ));

   sdl_service ss;
   ss.add_window( win );
   ss.run();

   return 0;
}

//code end

This code depends on the boost, the boost::gil, and the sdl lib. Make sure to set the path properly. The sdl lib
requires to be linked to sdl.lib and sdl_main.lib on Windows. The sdl.dll ( on Windows ) need to be accessible,
as well.

Running this example will display a black window. The application can be quit by pressing the Escape key or by using
the mouse.


Adding a redraw handler
-----------------------

To have something meaningful to display on screen we need to create a redraw handler. It's very easy to do, just create
class that holds a function with the follwing signature:

//code begin
void redraw( const bgra8_view_t& sdl_view )
//code end

This is the only requirement for a redraw handler.

Here an easy example:

//code begin
#include <boost/shared_ptr.hpp>

#include <boost/gil/gil_all.hpp>

#include <boost/gil/extension/io/bmp_io.hpp>
#include <boost/gil/extension/sdl/sdl_wrapper.hpp>

using namespace std;
using namespace boost;
using namespace gil;
using namespace sdl;

struct my_redraw_handler
{
   my_redraw_handler( rgb8_view_t v )
   : _view( v ) {}

   void redraw( const bgra8_view_t& sdl_view )
   {
      copy_pixels( color_converted_view<bgra8_pixel_t>( _view )
                 , sdl_view                                     );
   }

private:

   rgb8_view_t _view;
};

int main( int argc, char* argv[] )
{
   // load the image
   rgb8_image_t img;
   bmp_read_image( ".\\flower.bmp", img );


   // define window type
   typedef sdl_window< sdl::detail::default_keyboard_event_handler
                     , my_redraw_handler
                     > window_t;

   typedef shared_ptr< window_t > window_ptr_t;

   // create redraw handler
   typedef shared_ptr< my_redraw_handler > rh_ptr_t;
   rh_ptr_t rh_ptr( new my_redraw_handler( view( img ) ));


   // create window
   window_ptr_t win( new window_t( view( img ).width()
                                 , view( img ).height() 
                                 , rh_ptr ));

   // create service and let's roll
   sdl_service ss;
   ss.add_window( win );
   ss.run();

	return 0;
}
//code end

Since there is only a redraw handler it will be invoked just once at the beginning for initialization.
When adding more handler like for the keyboard or a timer a return variable will decide if another
redraw event is needed. This gives the user the most flexible solution will saving unneeded redrawing 
invocation. Let's see how this work:

Adding a keyboard event handler
-------------------------------

//code begin
#include <boost/random.hpp>
#include <boost/shared_ptr.hpp>

#include <boost/gil/gil_all.hpp>

#include <boost/gil/extension/io/bmp_io.hpp>
#include <boost/gil/extension/sdl/sdl_wrapper.hpp>

using namespace std;
using namespace boost;
using namespace gil;
using namespace sdl;

class my_keyboard_event_handler
{
public:

   my_keyboard_event_handler()
   : _color( 0, 0, 0 )
   , _range( 0, 255 )
   , _die( _random_generator, _range )
   {}

   bool key_up()
   {
      get_color( _color, red_t()   ) = _die();
      get_color( _color, green_t() ) = _die();
      get_color( _color, blue_t()  ) = _die();

      fill_pixels( _view
                 , _color );

      // true for redraw
      return true;
   }

   void set_img( rgb8_view_t v )
   {
      _view = v;
   }

private:

   rgb8_view_t _view;
   rgb8_pixel_t _color;

   mt19937        _random_generator;
   uniform_int<>  _range;

   variate_generator< mt19937&
                    , uniform_int<>
                    > _die;

};

struct my_redraw_handler
{
   my_redraw_handler( rgb8_view_t v )
   : _view( v ) {}

   void redraw( const bgra8_view_t& sdl_view )
   {
      copy_pixels( color_converted_view<bgra8_pixel_t>( _view )
                 , sdl_view                                     );
   }

private:

   rgb8_view_t _view;
};

int main( int argc, char* argv[] )
{
   // create black image
   rgb8_image_t img( 640, 480 );
   fill_pixels( view( img ), rgb8_pixel_t( 0, 0, 0 ));

   // define window type
   typedef sdl_window< my_keyboard_event_handler
                     , my_redraw_handler
                     > window_t;

   typedef shared_ptr< window_t > window_ptr_t;

   // create redraw handler
   typedef shared_ptr< my_redraw_handler > rh_ptr_t;
   rh_ptr_t rh_ptr( new my_redraw_handler( view( img ) ));


   // create window
   window_ptr_t win( new window_t( view( img ).width()
                                 , view( img ).height() 
                                 , rh_ptr ));

   // set the image in the keyboard handler
   win->my_keyboard_event_handler::set_img( view( img ));

   // create service and let's roll
   sdl_service ss;
   ss.add_window( win );
   ss.run();

	return 0;
}
//code end

At this very moment only the "key_up" event is handled inside the keyboard handler. Next versions of
this extension will support many more.

The next example shows the use of a timer.


Adding a timer handler
----------------------

//code begin
#include <boost/random.hpp>
#include <boost/shared_ptr.hpp>

#include <boost/gil/gil_all.hpp>

#include <boost/gil/extension/io/bmp_io.hpp>
#include <boost/gil/extension/sdl/sdl_wrapper.hpp>

using namespace std;
using namespace boost;
using namespace gil;
using namespace sdl;

class my_timer_handler
{
public:

   my_timer_handler()
   : _color( 0, 0, 0 )
   , _range( 0, 255 )
   , _die( _random_generator, _range )
   {}

   bool time_elapsed()
   {
      get_color( _color, red_t()   ) = _die();
      get_color( _color, green_t() ) = _die();
      get_color( _color, blue_t()  ) = _die();

      fill_pixels( _view
                 , _color );

      // true for redraw
      return true;
   }

   void set_img( rgb8_view_t v )
   {
      _view = v;
   }

private:

   rgb8_view_t _view;
   rgb8_pixel_t _color;

   mt19937        _random_generator;
   uniform_int<>  _range;

   variate_generator< mt19937&
                    , uniform_int<>
                    > _die;

};

struct my_redraw_handler
{
   my_redraw_handler( rgb8_view_t v )
   : _view( v ) {}

   void redraw( const bgra8_view_t& sdl_view )
   {
      copy_pixels( color_converted_view<bgra8_pixel_t>( _view )
                 , sdl_view                                     );

      std::cout << "redraw" << std::endl;
   }

private:

   rgb8_view_t _view;
};

int main( int argc, char* argv[] )
{
   sdl_service ss;

   // create black image
   rgb8_image_t img( 640, 480 );
   fill_pixels( view( img ), rgb8_pixel_t( 0, 0, 0 ));

   // define window type
   typedef sdl_window< sdl::detail::default_keyboard_event_handler
                     , my_redraw_handler
                     , my_timer_handler
                     > window_t;

   typedef shared_ptr< window_t > window_ptr_t;

   // create redraw handler
   typedef shared_ptr< my_redraw_handler > rh_ptr_t;
   rh_ptr_t rh_ptr( new my_redraw_handler( view( img ) ));


   // create window
   window_ptr_t win( new window_t( view( img ).width()
                                 , view( img ).height() 
                                 , rh_ptr ));

   // set the image and clock the timer
   win->my_timer_handler::set_img( view( img ));
   win->set_timer( 5000 );

   // create service and let's roll
   ss.add_window( win );
   ss.run();

	return 0;
}
//code end

A timer handler is very similar to a keyboard handler. It must define the function

//code begin
bool time_elapsed();
//code end